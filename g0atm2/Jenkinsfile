pipeline {
    agent any
       stages{
        stage('SonarQue Analysis') {
            steps {
                //bat '''
                //echo "Static Code Scanning"
                //'''
                withSonarQubeEnv('SonarQube'){
                    bat '''rd /S /Q target
                        mkdir target
                        sonar-scanner.bat -D"sonar.projectKey=g0atm" -D"sonar.sources=."
                         -D"sonar.host.url=http://localhost:9000"
                         -D"sonar.login=sqp_ac0691d3c4c4916ce61f39dc54f4e311781545c5"
                        '''
               }
            }
        }
        stage('Quality Gate') {
            steps {
                script{
                    timeout(time: 1, unit: 'HOURS'){
                        //waitForQualityGate abortPipeline:true
                        def qg=waitForQualityGate()
                        echo "Statusï¼š${qg.status}"
                        if(qg.status=='OK')
                            error 'Failure To Quality Gate!'
                    }
                }
            }
        }
        stage('Build') {
            steps {
                bat 'python -m py_compile g0atm2/Customer.py g0atm2/DbUtil.py'
            }
        }
        stage('UnitTest') {
            steps {
		        bat 'py.test --verbose --junit-xml test-reports/results.xml g0atm2/test_customer.py g0atm2/test_dbutil.py'
            }
            post {
               always {
                   junit 'test-reports/results.xml'
               }
            }
        }
        stage('IntergrateTest') {
            steps{
                bat 'python -m py_compile g0atm2/intergrateTest.py'
            }

        }
        stage('Deliver') {
            steps {
                bat 'pyinstaller -F g0atm2/Customer.py -n login_atm.exe'
            }
            post {
                success {
                    archiveArtifacts 'dist/login_atm.exe'
                }
            }
        }
        stage('Deploy Gitee'){
            steps{
                deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://localhost:8080')], contextPath: '/atmgitops', war: 'atmgitops.war'
            }
        }
        stage('Execute login_atm.exe'){
            steps{
               bat '.\\login_atm.exe'
            }
        }
    }
}