pipeline {
    agent any
    stages{
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube'){
                    bat '''
                         sonar-scanner.bat -D"sonar.projectKey=g0atm" -D"sonar.sources=."
                         -D"sonar.host.url=http://localhost:9000"
                         -D"sonar.login=squ_a88e33de7029f83407215838f6fe1ae176e02c83"
                        '''
               }
            }
        }
        stage('Quality Gate') {
            steps {
                script{
                    sleep(30)
                    timeout(time: 10, unit: 'MINUTES'){
                        //waitForQualityGate abortPipeline:true
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                bat 'python -d -m py_compile g0atm0/views/Customer.py g0atm0/models/DbUtil.py g0atm0/models/pgini.py'
            }
        }
        stage('Unit Test') {
            steps {
		        bat 'pytest --verbose --junit-xml g0atm0/tests/xunit-reports/xunit-result.xml g0atm0/tests/test_customer.py g0atm0/tests/test_dbutil.py'
            }
            post {
               always {
                   junit 'g0atm0/tests/xunit-reports/xunit-result.xml'
               }
            }
        }
        stage('Intergrate Test') {
            steps{
                bat '''
                    coverage run g0atm0/tests/test_dbutil.py
                    coverage run g0atm0/tests/test_customer.py
                    coverage run g0atm0/tests/test_intergrate.py
                    coverage html -d g0atm0/tests/coverage-reports
                    '''
            }
             post {
               always {
                   publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'g0atm0/tests/coverage-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
               }
            }

        }
        stage('SonarQube Coverage Rate'){
            steps{
                bat '''
                    //pip install nose coverage nosexcover pylint
                    nosetests -sv --with-xunit --xunit-file=nosetests.xml --with-xcoverage --xcoverage-file=coverage.xml
                    '''
            }
        }
        stage('Deliver') {
            steps {
                bat 'pyinstaller login_atm.spec'
            }
            post {
                success {
                    archiveArtifacts 'dist/login_atm.exe'
                }
            }
        }
        stage('Deploy Gitee'){
            steps{
                echo 'release gitee'
            }
        }
        stage('Execute login_atm.exe'){
            steps{
               bat '.\\dist\\login_atm.exe'
            }
        }
    }
}